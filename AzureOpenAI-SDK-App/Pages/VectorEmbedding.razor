@page "/VectorEmbedding"
@using Azure;
@using Azure.AI.OpenAI;
@using Microsoft.Azure.Cosmos;

@using static AzureOpenAI_SDK_App.KeyManager;

<PageTitle>Azure OpenAI SDK - Vector Embeddings SEarch </PageTitle>

<h1 style="text-align:center;color:blue;font-family:'Comic Sans MS';font-weight:bold;">OpenAI Embeddings Search Test Page</h1>
<hr />
<br />

<div style="background-color:aliceblue;margin:10px;" class="card">
    <div class="card-header">
        <label style="color:blue;font-family:'Comic Sans MS';font-weight:bold;font-size:large;text-decoration:underline;">Embedding Vector Search (Azure Cosmos DB)</label>
        <br /><br />
        <label style="color:blue;font-family:'Comic Sans MS';font-size:medium; font-style:italic;">Search the Microsoft Windows365 FAQs (https://www.microsoft.com/en-us/windows-365/faq) and get a list of top 5 candidates using their embedding vector cosine similarity scores. FAQs have been converted to embedding vectors and stored on Azure Cosmos DB.</label>
    </div>
    <div class="card-body">
       
        <div>
            <label style="font-family:'Comic Sans MS';color:blue;margin:5px;">Enter key words(s) to search: </label>
            <input style="margin:5px;" @bind=cosmos_search_string />
            <button class="btn btn-primary" @onclick=SearchCosmosList>Search</button>
        </div>
    </div>
    <div class="card-footer">
        <div>
            <textarea readonly="readonly" style="font-family:'Comic Sans MS';font-size:medium;color:black;width:75%; height:250px;">@input_phrase_search_result</textarea>
        </div>
    </div>
</div>

@code {

    #region class variables and defaults
    //class variables
    OpenAIClient client;
    //Azure.AI.OpenAI.Embeddings search_object;

    //defaults
    private string current_model { get; set; } = AzureOpenAIEmbeddingModel;   //AzureOpenAIEmbeddingModel
    private string input_phrase { get; set; } = string.Empty;
    private string input_phrase_list { get; set; } = string.Empty;
    private string input_phrase_search_result { get; set; } = string.Empty;
    private string cosmos_search_string { get; set; } = string.Empty;
    private EmbeddingObject cosmos_search_object { get; set; } = new EmbeddingObject();

    #endregion

    #region Search Methods

    private void SearchCosmosList()
    {

        input_phrase_search_result = string.Empty;
        client = new OpenAIClient(new Uri(AzureOpenAIUrl), new AzureKeyCredential(SecretKey));

        if (cosmos_search_string.Length > 3)
        {
            //calling the embeddings sdk to get the embedding vector
            CreateCosmosSearchEmbedding(cosmos_search_string);

            //evaluting the returned ebedding with my list of embeddings from cosmos
            foreach (var v in cosmos_items)
            {
                double consine_dif = GetCosineSimilarity(v.text_data.embedding, (System.Collections.Generic.List<float>)cosmos_search_object.text_data2);
                v.score = consine_dif;
            }
        }

        ////get top 5 candidates and display them
        List<EmbeddingObject> search_objects_sorted = cosmos_items.OrderByDescending(o => o.score).ToList();
        for (int i = 0; i < 5; i++)
        {
            input_phrase_search_result += $"({i + 1}) [Score: {search_objects_sorted[i].score.ToString(".000")}] -- {search_objects_sorted[i].text_value}\n ";
        }
    }

    private void CreateCosmosSearchEmbedding(string txt_to_encode)
    {
        //used to call the embeddigns SDK to vectorize my search string

        EmbeddingsOptions options = new(txt_to_encode);

        var response = client.GetEmbeddings(current_model, options);

        var embedding_response = response.Value.Data[0].Embedding;

        cosmos_search_object = new EmbeddingObject() { text_value = txt_to_encode, text_data2 = embedding_response };

        //return embedding_response.ToString();

    }


        #endregion

    #region Load Data

    private List<EmbeddingObject> cosmos_items { get; set; } = new List<EmbeddingObject>();

    private async void LoadCosmosData()
    {
        //load the previous saved embeddings data from cosmos into a list, which I will use to compare with the search string

        cosmos_items.Clear();
        using (CosmosClient cCosmos = new CosmosClient(AzureCosmosDBUrl, AzureCosmosDBKey))
        {
            Microsoft.Azure.Cosmos.Container container = cCosmos.GetContainer("SampleData", "Complaint");

            // Read item from container

            var sqlQueryText = "SELECT * FROM c";

            QueryDefinition queryDefinition = new QueryDefinition(sqlQueryText);

            FeedIterator<EmbeddingObject> queryResultSetIterator = container.GetItemQueryIterator<EmbeddingObject>(queryDefinition);

            while (queryResultSetIterator.HasMoreResults)
            {
                FeedResponse<EmbeddingObject> currentResults = await queryResultSetIterator.ReadNextAsync();
                foreach (EmbeddingObject t in currentResults)
                {
                    //add to main list
                    cosmos_items.Add(t);
                    //add to display area
                    //input_phrase_list += $"{t.text_value}\n";
                }
            }
        }
    }

    #endregion

    #region General Methods

    public static double GetCosineSimilarity(List<float> V1, List<float> V2)
    {
        //used to generate a cosine similarity score between two embedding vectors
        int N = 0;
        N = ((V2.Count < V1.Count) ? V2.Count : V1.Count);
        double dot = 0.0d;
        double mag1 = 0.0d;
        double mag2 = 0.0d;
        for (int n = 0; n < N; n++)
        {
            dot += V1[n] * V2[n];
            mag1 += Math.Pow(V1[n], 2);
            mag2 += Math.Pow(V2[n], 2);
        }

        return dot / (Math.Sqrt(mag1) * Math.Sqrt(mag2));
    }

    protected override void OnInitialized()
    {
        //load the data from cosmos
        LoadCosmosData();
    }

    #endregion

}
